
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f1  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b7  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022d  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	6b c1       	rjmp	.+726    	; 0x2da <__vector_1>
   4:	7b c1       	rjmp	.+758    	; 0x2fc <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	17 c1       	rjmp	.+558    	; 0x23c <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	b8 c0       	rjmp	.+368    	; 0x184 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a9 36       	cpi	r26, 0x69	; 105
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	43 d1       	rcall	.+646    	; 0x2ca <main>
  44:	9a c1       	rjmp	.+820    	; 0x37a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <init_pin>:
	}
}

void init_pin(void) 
{
	PIND_OUT;
  48:	81 b3       	in	r24, 0x11	; 17
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	81 bb       	out	0x11, r24	; 17
	PIND_LOW;
  4e:	92 b3       	in	r25, 0x12	; 18
  50:	92 bb       	out	0x12, r25	; 18
	PINC_OUT;
  52:	94 b3       	in	r25, 0x14	; 20
  54:	84 bb       	out	0x14, r24	; 20
	PINC_LOW;
  56:	85 b3       	in	r24, 0x15	; 21
  58:	85 bb       	out	0x15, r24	; 21
	//This is tact button minute and hour
	TACT_BUTTON_OUT;
  5a:	81 b3       	in	r24, 0x11	; 17
  5c:	8b 7f       	andi	r24, 0xFB	; 251
  5e:	81 bb       	out	0x11, r24	; 17
  60:	81 11       	cpse	r24, r1
  62:	8b 98       	cbi	0x11, 3	; 17
	TACT_BUTTON_LOW;
  64:	82 b3       	in	r24, 0x12	; 18
  66:	8b 7f       	andi	r24, 0xFB	; 251
  68:	82 bb       	out	0x12, r24	; 18
  6a:	81 11       	cpse	r24, r1
  6c:	93 98       	cbi	0x12, 3	; 18
  6e:	08 95       	ret

00000070 <init_timer_light>:
}	

void init_timer_light(void) 
{
	SFIOR |= (1<<PSR10);
  70:	80 b7       	in	r24, 0x30	; 48
  72:	81 60       	ori	r24, 0x01	; 1
  74:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1<<TOIE0);
  76:	89 b7       	in	r24, 0x39	; 57
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0x9c;
  7c:	8c e9       	ldi	r24, 0x9C	; 156
  7e:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= (1<<CS01);		
  80:	83 b7       	in	r24, 0x33	; 51
  82:	82 60       	ori	r24, 0x02	; 2
  84:	83 bf       	out	0x33, r24	; 51
  86:	08 95       	ret

00000088 <init_timer>:
}

void init_timer(void) 
{
	TIMSK |=(1<<OCIE1A);
  88:	89 b7       	in	r24, 0x39	; 57
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1<<WGM12);
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	88 60       	ori	r24, 0x08	; 8
  92:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |=(1<<CS12);
  94:	8e b5       	in	r24, 0x2e	; 46
  96:	84 60       	ori	r24, 0x04	; 4
  98:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0xC34;
  9a:	84 e3       	ldi	r24, 0x34	; 52
  9c:	9c e0       	ldi	r25, 0x0C	; 12
  9e:	9b bd       	out	0x2b, r25	; 43
  a0:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
  a2:	1d bc       	out	0x2d, r1	; 45
  a4:	1c bc       	out	0x2c, r1	; 44
  a6:	08 95       	ret

000000a8 <output_shift_register>:
}

void output_shift_register(uint8_t buffer) 
{
	uint8_t counter;
	PORTD |= (1<<PD7);
  a8:	97 9a       	sbi	0x12, 7	; 18
  aa:	98 e0       	ldi	r25, 0x08	; 8
	for (counter=0; counter<8; counter++) 
	{
		if ((buffer & 0x80) != 0)
  ac:	88 23       	and	r24, r24
  ae:	14 f4       	brge	.+4      	; 0xb4 <output_shift_register+0xc>
			PORTD |= (1<<PD5);
  b0:	95 9a       	sbi	0x12, 5	; 18
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <output_shift_register+0xe>
		else
			PORTD &= ~(1<<PD5);
  b4:	95 98       	cbi	0x12, 5	; 18
		PORTD |= (1<<PD7);
  b6:	97 9a       	sbi	0x12, 7	; 18
		buffer = buffer<<1;
  b8:	88 0f       	add	r24, r24
		PORTD &= ~(1<<PD6);
  ba:	96 98       	cbi	0x12, 6	; 18
		PORTD |= (1<<PD6);
  bc:	96 9a       	sbi	0x12, 6	; 18
  be:	91 50       	subi	r25, 0x01	; 1

void output_shift_register(uint8_t buffer) 
{
	uint8_t counter;
	PORTD |= (1<<PD7);
	for (counter=0; counter<8; counter++) 
  c0:	a9 f7       	brne	.-22     	; 0xac <output_shift_register+0x4>
		PORTD |= (1<<PD7);
		buffer = buffer<<1;
		PORTD &= ~(1<<PD6);
		PORTD |= (1<<PD6);
	}
}
  c2:	08 95       	ret

000000c4 <change_digit>:

uint8_t change_digit(uint8_t *buffer) {
	if (*buffer == 1)
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	99 f0       	breq	.+38     	; 0xf2 <change_digit+0x2e>
		return ONE;
	else if (*buffer == 2)
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	99 f0       	breq	.+38     	; 0xf6 <change_digit+0x32>
		return TWO;
	else if (*buffer == 3)
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	99 f0       	breq	.+38     	; 0xfa <change_digit+0x36>
		return THREE;
	else if (*buffer == 4)
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	99 f0       	breq	.+38     	; 0xfe <change_digit+0x3a>
		return FOUR;
	else if (*buffer == 5)
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	99 f0       	breq	.+38     	; 0x102 <change_digit+0x3e>
		return FIVE;
	else if (*buffer == 6)
  dc:	86 30       	cpi	r24, 0x06	; 6
  de:	99 f0       	breq	.+38     	; 0x106 <change_digit+0x42>
		return SIX;
	else if (*buffer == 7)
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	99 f0       	breq	.+38     	; 0x10a <change_digit+0x46>
		return SEVEN;
	else if (*buffer == 8)
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	99 f0       	breq	.+38     	; 0x10e <change_digit+0x4a>
		return EIGHT;
	else if (*buffer == 9)
  e8:	89 30       	cpi	r24, 0x09	; 9
  ea:	99 f0       	breq	.+38     	; 0x112 <change_digit+0x4e>
		return NINE;
	else if (*buffer == 0)
  ec:	88 23       	and	r24, r24
  ee:	99 f0       	breq	.+38     	; 0x116 <change_digit+0x52>
		return ZERO;
}
  f0:	08 95       	ret
	}
}

uint8_t change_digit(uint8_t *buffer) {
	if (*buffer == 1)
		return ONE;
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	08 95       	ret
	else if (*buffer == 2)
		return TWO;
  f6:	84 ea       	ldi	r24, 0xA4	; 164
  f8:	08 95       	ret
	else if (*buffer == 3)
		return THREE;
  fa:	80 eb       	ldi	r24, 0xB0	; 176
  fc:	08 95       	ret
	else if (*buffer == 4)
		return FOUR;
  fe:	89 e9       	ldi	r24, 0x99	; 153
 100:	08 95       	ret
	else if (*buffer == 5)
		return FIVE;
 102:	82 e9       	ldi	r24, 0x92	; 146
 104:	08 95       	ret
	else if (*buffer == 6)
		return SIX;
 106:	82 e8       	ldi	r24, 0x82	; 130
 108:	08 95       	ret
	else if (*buffer == 7)
		return SEVEN;
 10a:	88 ef       	ldi	r24, 0xF8	; 248
 10c:	08 95       	ret
	else if (*buffer == 8)
		return EIGHT;
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	08 95       	ret
	else if (*buffer == 9)
		return NINE;
 112:	80 e9       	ldi	r24, 0x90	; 144
 114:	08 95       	ret
	else if (*buffer == 0)
		return ZERO;
 116:	80 ec       	ldi	r24, 0xC0	; 192
}
 118:	08 95       	ret

0000011a <convert_number_clock>:

void convert_number_clock() 
{	
	digit_rank_thou = hour/1000;
 11a:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <hour>
 11e:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <hour+0x1>
 122:	c9 01       	movw	r24, r18
 124:	68 ee       	ldi	r22, 0xE8	; 232
 126:	73 e0       	ldi	r23, 0x03	; 3
 128:	01 d1       	rcall	.+514    	; 0x32c <__divmodhi4>
 12a:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <digit_rank_thou>
	digit_rank_tree = hour/100%10;
 12e:	c9 01       	movw	r24, r18
 130:	64 e6       	ldi	r22, 0x64	; 100
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	fb d0       	rcall	.+502    	; 0x32c <__divmodhi4>
 136:	cb 01       	movw	r24, r22
 138:	6a e0       	ldi	r22, 0x0A	; 10
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	f7 d0       	rcall	.+494    	; 0x32c <__divmodhi4>
 13e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <digit_rank_tree>
	digit_rank_two = minute/10%10;
 142:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <minute>
 146:	8d ec       	ldi	r24, 0xCD	; 205
 148:	28 9f       	mul	r18, r24
 14a:	91 2d       	mov	r25, r1
 14c:	11 24       	eor	r1, r1
 14e:	96 95       	lsr	r25
 150:	96 95       	lsr	r25
 152:	96 95       	lsr	r25
 154:	98 9f       	mul	r25, r24
 156:	81 2d       	mov	r24, r1
 158:	11 24       	eor	r1, r1
 15a:	86 95       	lsr	r24
 15c:	86 95       	lsr	r24
 15e:	86 95       	lsr	r24
 160:	88 0f       	add	r24, r24
 162:	38 2f       	mov	r19, r24
 164:	33 0f       	add	r19, r19
 166:	33 0f       	add	r19, r19
 168:	83 0f       	add	r24, r19
 16a:	39 2f       	mov	r19, r25
 16c:	38 1b       	sub	r19, r24
 16e:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <digit_rank_two>
	digit_rank_one = minute%10;
 172:	99 0f       	add	r25, r25
 174:	89 2f       	mov	r24, r25
 176:	88 0f       	add	r24, r24
 178:	88 0f       	add	r24, r24
 17a:	98 0f       	add	r25, r24
 17c:	29 1b       	sub	r18, r25
 17e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <digit_rank_one>
 182:	08 95       	ret

00000184 <__vector_9>:
}

ISR (TIMER0_OVF_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	if (number_rank==0)
 1a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <__vector_9+0x3a>
	{
		ONE_DIGIT_OFF;
 1ae:	90 98       	cbi	0x12, 0	; 18
		TWO_DIGIT_OFF;
 1b0:	91 98       	cbi	0x12, 1	; 18
		THREE_DIGIT_OFF;
 1b2:	ab 98       	cbi	0x15, 3	; 21
		THOU_DIGIT_ON;
 1b4:	94 9a       	sbi	0x12, 4	; 18
		output_shift_register(change_digit(&digit_rank_one));
 1b6:	82 e6       	ldi	r24, 0x62	; 98
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	84 df       	rcall	.-248    	; 0xc4 <change_digit>
 1bc:	75 df       	rcall	.-278    	; 0xa8 <output_shift_register>
	}
	if (number_rank==1)
 1be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	41 f4       	brne	.+16     	; 0x1d6 <__vector_9+0x52>
	{
		ONE_DIGIT_OFF;
 1c6:	90 98       	cbi	0x12, 0	; 18
		TWO_DIGIT_OFF;
 1c8:	91 98       	cbi	0x12, 1	; 18
		THOU_DIGIT_OFF;
 1ca:	94 98       	cbi	0x12, 4	; 18
		THREE_DIGIT_ON;
 1cc:	ab 9a       	sbi	0x15, 3	; 21
		output_shift_register(change_digit(&digit_rank_two));
 1ce:	87 e6       	ldi	r24, 0x67	; 103
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	78 df       	rcall	.-272    	; 0xc4 <change_digit>
 1d4:	69 df       	rcall	.-302    	; 0xa8 <output_shift_register>
	}
	if (number_rank==2)
 1d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	41 f4       	brne	.+16     	; 0x1ee <__vector_9+0x6a>
	{
		ONE_DIGIT_OFF;
 1de:	90 98       	cbi	0x12, 0	; 18
		THREE_DIGIT_OFF;
 1e0:	ab 98       	cbi	0x15, 3	; 21
		THOU_DIGIT_OFF;
 1e2:	94 98       	cbi	0x12, 4	; 18
		TWO_DIGIT_ON;
 1e4:	91 9a       	sbi	0x12, 1	; 18
		output_shift_register(change_digit(&digit_rank_tree));
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	6c df       	rcall	.-296    	; 0xc4 <change_digit>
 1ec:	5d df       	rcall	.-326    	; 0xa8 <output_shift_register>
	}
	if (number_rank==3)
 1ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	41 f4       	brne	.+16     	; 0x206 <__vector_9+0x82>
	{
		TWO_DIGIT_OFF;
 1f6:	91 98       	cbi	0x12, 1	; 18
		THREE_DIGIT_OFF;
 1f8:	ab 98       	cbi	0x15, 3	; 21
		THOU_DIGIT_OFF;
 1fa:	94 98       	cbi	0x12, 4	; 18
		ONE_DIGIT_ON;
 1fc:	90 9a       	sbi	0x12, 0	; 18
		output_shift_register(change_digit(&digit_rank_thou));
 1fe:	88 e6       	ldi	r24, 0x68	; 104
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	60 df       	rcall	.-320    	; 0xc4 <change_digit>
 204:	51 df       	rcall	.-350    	; 0xa8 <output_shift_register>
	}
	number_rank++;
 206:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
	if (number_rank>3) number_rank=0;
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	18 f4       	brcc	.+6      	; 0x216 <__vector_9+0x92>
		THREE_DIGIT_OFF;
		THOU_DIGIT_OFF;
		ONE_DIGIT_ON;
		output_shift_register(change_digit(&digit_rank_thou));
	}
	number_rank++;
 210:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 214:	02 c0       	rjmp	.+4      	; 0x21a <__vector_9+0x96>
	if (number_rank>3) number_rank=0;
 216:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_6>:
ISR (TIMER1_COMPA_vect)
{ 
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
	++second;
 24c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <second>
 250:	8f 5f       	subi	r24, 0xFF	; 255
	if (second>59)
 252:	8c 33       	cpi	r24, 0x3C	; 60
 254:	18 f4       	brcc	.+6      	; 0x25c <__vector_6+0x20>
	number_rank++;
	if (number_rank>3) number_rank=0;
}
ISR (TIMER1_COMPA_vect)
{ 
	++second;
 256:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <second>
 25a:	07 c0       	rjmp	.+14     	; 0x26a <__vector_6+0x2e>
	if (second>59)
	{
		second=0;
 25c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <second>
		++minute;
 260:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minute>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <minute>
	}	if (minute>59)
 26a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minute>
 26e:	8c 33       	cpi	r24, 0x3C	; 60
 270:	60 f0       	brcs	.+24     	; 0x28a <__vector_6+0x4e>
	{
		minute=0;
 272:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <minute>
		hour+=100;
 276:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <hour>
 27a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hour+0x1>
 27e:	8c 59       	subi	r24, 0x9C	; 156
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <hour+0x1>
 286:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <hour>
	}
	if (hour>2300) hour=0;
 28a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <hour>
 28e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hour+0x1>
 292:	8d 3f       	cpi	r24, 0xFD	; 253
 294:	98 40       	sbci	r25, 0x08	; 8
 296:	24 f0       	brlt	.+8      	; 0x2a0 <__vector_6+0x64>
 298:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <hour+0x1>
 29c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <hour>
}
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <init_timer_button>:
void init_timer_button()
{
	GICR |= (1<<INTF0);
 2b0:	8b b7       	in	r24, 0x3b	; 59
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01);
 2b6:	85 b7       	in	r24, 0x35	; 53
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	85 bf       	out	0x35, r24	; 53
	
	GICR|=(1<<INTF1);
 2bc:	8b b7       	in	r24, 0x3b	; 59
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC11);
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	85 bf       	out	0x35, r24	; 53
 2c8:	08 95       	ret

000002ca <main>:
	NINE = 0x90
};

void main (void)
{
	cli();
 2ca:	f8 94       	cli
	init_pin();
 2cc:	bd de       	rcall	.-646    	; 0x48 <init_pin>
	init_timer_light();
 2ce:	d0 de       	rcall	.-608    	; 0x70 <init_timer_light>
	init_timer();
 2d0:	db de       	rcall	.-586    	; 0x88 <init_timer>
	init_timer_button();	
 2d2:	ee df       	rcall	.-36     	; 0x2b0 <init_timer_button>
	sei();
 2d4:	78 94       	sei
	while (1) {
		convert_number_clock();	
 2d6:	21 df       	rcall	.-446    	; 0x11a <convert_number_clock>
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <main+0xc>

000002da <__vector_1>:
	GICR|=(1<<INTF1);
	MCUCR|=(1<<ISC11);
}

ISR (INT0_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	8f 93       	push	r24
	++minute;
 2e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minute>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <minute>
}
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_2>:

ISR (INT1_vect)
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
	hour+=100;
 30a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <hour>
 30e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hour+0x1>
 312:	8c 59       	subi	r24, 0x9C	; 156
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <hour+0x1>
 31a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <hour>
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__divmodhi4>:
 32c:	97 fb       	bst	r25, 7
 32e:	07 2e       	mov	r0, r23
 330:	16 f4       	brtc	.+4      	; 0x336 <__divmodhi4+0xa>
 332:	00 94       	com	r0
 334:	06 d0       	rcall	.+12     	; 0x342 <__divmodhi4_neg1>
 336:	77 fd       	sbrc	r23, 7
 338:	08 d0       	rcall	.+16     	; 0x34a <__divmodhi4_neg2>
 33a:	0b d0       	rcall	.+22     	; 0x352 <__udivmodhi4>
 33c:	07 fc       	sbrc	r0, 7
 33e:	05 d0       	rcall	.+10     	; 0x34a <__divmodhi4_neg2>
 340:	3e f4       	brtc	.+14     	; 0x350 <__divmodhi4_exit>

00000342 <__divmodhi4_neg1>:
 342:	90 95       	com	r25
 344:	81 95       	neg	r24
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	08 95       	ret

0000034a <__divmodhi4_neg2>:
 34a:	70 95       	com	r23
 34c:	61 95       	neg	r22
 34e:	7f 4f       	sbci	r23, 0xFF	; 255

00000350 <__divmodhi4_exit>:
 350:	08 95       	ret

00000352 <__udivmodhi4>:
 352:	aa 1b       	sub	r26, r26
 354:	bb 1b       	sub	r27, r27
 356:	51 e1       	ldi	r21, 0x11	; 17
 358:	07 c0       	rjmp	.+14     	; 0x368 <__udivmodhi4_ep>

0000035a <__udivmodhi4_loop>:
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	a6 17       	cp	r26, r22
 360:	b7 07       	cpc	r27, r23
 362:	10 f0       	brcs	.+4      	; 0x368 <__udivmodhi4_ep>
 364:	a6 1b       	sub	r26, r22
 366:	b7 0b       	sbc	r27, r23

00000368 <__udivmodhi4_ep>:
 368:	88 1f       	adc	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	5a 95       	dec	r21
 36e:	a9 f7       	brne	.-22     	; 0x35a <__udivmodhi4_loop>
 370:	80 95       	com	r24
 372:	90 95       	com	r25
 374:	bc 01       	movw	r22, r24
 376:	cd 01       	movw	r24, r26
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
